\import Data.Maybe
\import Function (o)
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import hw01 (gcd)
\import lect07
\open Nat(+)

-- 1. Определите функцию swap несколькими способами.

-- При помощи \cowith и доступа к полям.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst_ => p.snd_
  | snd_ => p.fst_

-- При помощи \new и паттерн матчинга.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a, b) => \new Pair B A b a

-- При помощи \new и доступа к полям.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair B A {
  | fst_ => p.snd_
  | snd_ => p.fst_
}

-- 2. Докажите, что swap (swap p) = p.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp

-- 3. Докажите, что тип PosNat 0 пустой, а тип PosNat 1 нет.

\func zero-isNotPos (p : PosNat 0) : Empty => \case PosNat.p {p}

\func one-isPos : PosNat 1 => \new PosNat 1 ()

-- 4. Определите \record, состоящий из пар взаимно простых натуральных чисел.
--    Определите тип, состоящий из натуральных чисел, взаимно простых с 60.

\record Coprime (n m : Nat) {
  | is-comprime : Not (gcd n m = 1)
}

\func Coprime-60 : \Type => Coprime 60

-- 5. Закончите определение класса монад. Этот класс должен содержать все монадные законы и реализовывать все поля из класса функторов.

\class Monad \extends Functor {
  | return {A : \Set} : A -> F A
  | \infixl 1 >>= {A B : \Set} : F A -> (A -> F B) -> F B
  | left-bind-id {A B : \Set} (a : A) (f : A -> F B) : (return a >>= f) = f a
  | right-bind-id {A : \Set} (m : F A) : (m >>= return) = m
  | bind-assoc {A B C : \Set} (m : F A) (f : A -> F B) (g : B -> F C) : (m >>= (\lam x => f x >>= g)) = ((m >>= f) >>= g)

  \default fmap {A B : \Set} (f : A -> B) (m : F A) : F B
    => m >>= return o f
  \default fmap-id {A : \Set} (m : F A) : fmap (\lam a => a) m = m
    => right-bind-id m
  \default fmap-comp {A B C : \Set} (f : A -> B) (g : B -> C) (m : F A) : fmap (\lam a => g (f a)) m = fmap g (fmap f m)
      => (m >>= return o g o f)                        ==< pmap (m >>=) (ext \lam a => inv (left-bind-id (f a) (return o g))) >==
         (m >>= \lam a => return (f a) >>= return o g) ==< bind-assoc m (return o f) (return o g) >==
         (m >>= return o f >>= return o g) `qed
}

-- 6. Определите \instance Monad для Maybe.

\instance MaybeMonad : Monad Maybe
  | return {A : \Set} : A -> Maybe A => just
  | >>= {A B : \Set} (ma : Maybe A) (f : A -> Maybe B) : Maybe B => \case ma \with {
    | nothing => nothing
    | just a => f a
  }
  | left-bind-id _ _ => idp
  | right-bind-id {A : \Set} (m : Maybe A) : (m >>= return) = m \with {
    | nothing => idp
    | just a => idp
  }
  | bind-assoc {A B C : \Set} (m : Maybe A) (f : A -> Maybe B) (g : B -> Maybe C) : (m >>= (\lam x => f x >>= g)) = ((m >>= f) >>= g) \elim m {
    | nothing => idp
    | just a => idp
  }

-- 7. Определите \instance Monad для State и State'.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\func runState' {S A : \Type} (st : State' S A) (s : S) : \Sigma S A \elim st
  | state' r => r s

\instance StateMonad (S : \Set) : Monad (State S)
  | return {A} a => \new State S A (\lam s => (s, a))
  | >>= {A B : \Set} (ma : State S A) (f : A -> State S B) : State S B
    => \new State S B (\lam s => \have (s', a) => ma.state s \in State.state {f a} s')
  | left-bind-id a f => idp
  | right-bind-id m => idp
  | bind-assoc m f g => idp

\instance StateMonad' (S : \Set) : Monad (State' S)
  | return {A} a => state' (\lam s => (s, a))
  | >>= {A B : \Set} (ma : State' S A) (f : A -> State' S B)
    => state' (\lam s => \let (s', a) => runState' ma s \in runState' (f a) s')
  | left-bind-id a f => cases (f a) \with {
    | state' x => pmap state' (ext \lam s => idp)
  }
  | right-bind-id m => cases m \with {
    | state' x => pmap state' (ext \lam s => idp)
  }
  | bind-assoc m f g => pmap state' (ext \lam s => idp)
