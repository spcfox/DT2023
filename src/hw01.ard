-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y

\func apply (f : Nat -> Nat) (x : Nat) => f x

\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x

\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 2 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

-- 5. Определите || через if.

\func if' (x : Bool) (t e : Bool) : Bool \elim x
  | true => t
  | false => e

\func \infixr 2 || (x y : Bool) : Bool => if' x true y

\func orTest1 : true || true = true => idp
\func orTest2 : false || true = true => idp
\func orTest3 : true || false = true => idp
\func orTest4 : false || false = false => idp


-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * x ^ y

\func expTest1 : 1 ^ 5 = 1 => idp
\func expTest2 : 2 ^ 0 = 1 => idp
\func expTest3 : 2 ^ 1 = 2 => idp
\func expTest4 : 2 ^ 2 = 4 => idp
\func expTest5 : 2 ^ 3 = 8 => idp
\func expTest6 : 2 ^ 10 = 1024 => idp

\func fac (x : Nat) : Nat \elim x
  | 0 => 1
  | suc x => suc x * fac x

\func facTest0 : fac 0 = 1 => idp
\func facTest1 : fac 1 = 1 => idp
\func facTest2 : fac 2 = 2 => idp
\func facTest3 : fac 3 = 6 => idp
\func facTest4 : fac 4 = 24 => idp

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => x - y * div x y

\func modTest1 : mod 6 9 = 6 => idp
\func modTest2 : mod 5 1 = 0 => idp
\func modTest3 : mod 5 2 = 1 => idp
\func modTest4 : mod 12 3 = 0 => idp

\func gcd (x y : Nat) => aux (x + y + 1) x y
  \where {
    \func aux (fuel x y : Nat) : Nat \elim fuel
      | 0 => 0
      | suc fuel => if (x < 1) y (aux fuel y (mod x y))
  }

\func gcdTest1 : gcd 6 9 = 3 => idp
\func gcdTest2 : gcd 5 4 = 1 => idp
\func gcdTest3 : gcd 12 15 = 3 => idp
\func gcdTest4 : gcd 30 20 = 10 => idp
\func gcdTest5 : gcd 1 20 = 1 => idp
\func gcdTest6 : gcd 20 1 = 1 => idp
\func gcdTest7 : gcd 0 10 = 10 => idp
\func gcdTest8 : gcd 10 0 = 10 => idp
\func gcdTest9 : gcd 0 0 = 0 => idp
