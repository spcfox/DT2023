\import Data.Bool
\import Data.Or
\import Logic
\import hw01 (fac)
\import lect02 (List, nil, cons)

-- 1. Определите полиморфный tail для списков.

\func tail {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons a xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func insertSort {A : \Type} (le : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => insert x (insertSort le xs)
  \where {
    \func insert (x : A) (xs : List A) : List A \elim xs
      | nil => cons x nil
      | cons h tl \as xs => if (le x h) (cons x xs) (cons h (insert x tl))
  }

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func insertSortTest1 : insertSort (<) (cons 1 (cons 2 (cons 3 nil))) = cons 1 (cons 2 (cons 3 nil)) => idp
\func insertSortTest2 : insertSort (<) (cons 3 (cons 2 (cons 1 nil))) = cons 1 (cons 2 (cons 3 nil)) => idp
\func insertSortTest3 : insertSort (<) (cons 3 (cons 1 (cons 5 (cons 2 nil)))) = cons 1 (cons 2 (cons 3 (cons 5 nil))) => idp

-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z) \elim x
  | false => idp
  | true => idp

\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z) \elim x
  | false => idp
  | true => idp

-- 4. Докажите, что fac 3 равно 6.

\func fac3=6 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R =>
  f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R \elim h
  | inl p => f p
  | inr q => g q

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R =>
  g (f \lam p _ => g p)

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) (pq : \Sigma P Q) : R =>
  f pq.1 pq.2

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q R : \Type} (f : Or P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) =>
  (\lam p => (f (inl p)).2, \lam q => (f (inr q)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q =>
  f (\lam pqp => pqp \lam p => f \lam _ => p)

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) =>
  (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty =>
  \lam p3 => h (3, p3)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (f : \Pi (x : Nat) -> P x -> Q x) (h : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) =>
  (h.1, f h.1 h.2)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty =>
  \lam p3 q3 => \case h 3 \with {
    | inl np3 => np3 p3
    | inr nq3 => nq3 q3
  }
