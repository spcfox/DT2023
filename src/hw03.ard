\import Data.List
\import Paths
\import Paths.Meta
\import lect03
\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.

\func fileTestNorm => (17, 8, 13, 55, 18, 21)

\func fileTest=fileTestNorm : fileTest = fileTestNorm => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\func t'''Norm => ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29))

\func t'''=t'''Norm : M5.t''' = t'''Norm => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | a :: xs => pmap (a ::) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

-- Это утверждение будет полезно для доказательства.
\func ++-nil {A : \Type} (xs : List A) : xs = xs ++ nil
  | nil => idp
  | a :: xs => pmap (a ::) (++-nil xs)

\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => ++-nil _
  | a :: xs => rewrite (reverse++ xs ys) (++-assoc _ _ _)

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs
  | nil => idp
  | a :: xs => rewrite reverse++ (pmap (a ::) (reverse-isInvolutive xs))

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.
\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n => rewrite (rdistr n m k)
                     (+-assoc _ _ _ *>
                      pmap (m * n +) (inv (+-assoc _ _ _) *> pmap (`+ k) (+-comm _ _) *> +-assoc _ _ _) *>
                      inv (+-assoc _ _ _))

\func zero*n (n : Nat) : 0 * n = 0 \elim n
  | 0 => idp
  | suc n => zero*n n

\func suc*n (n m : Nat) : suc n * m = n * m + m \elim m
  | 0 => idp
--  | suc m => pmap suc (rewrite (suc*n n m) {?}) -- Почему так типы не сходятся?
  | suc m => rewrite (suc*n n m)
                     (pmap suc (+-assoc _ _ _ *>
                                pmap (n * m +) (+-comm _ _) *>
                                inv (+-assoc _ _ _)))

\func *-comm (n m : Nat) : n * m = m * n \elim n
  | 0 => zero*n m
  | suc n => suc*n n m *> pmap (`+ m) (*-comm n m)

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k =>
  *-comm _ _ *> rdistr _ _ _ *> pmap2 (+) (*-comm _ _) (*-comm _ _)

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => f a b = f x b') p (pmap (f a) q)

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B =>
  transport _ p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  repl (pmap B p) b
