\import Data.List
\import Data.Or
\import Function.Meta
\import Logic
\import Paths
\import Paths.Meta
\import hw06 (In, contrProp)
\import lect12

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int
  | pos n => pos n
  | neg (suc n) => neg (suc (suc n))

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int \elim y
  | pos 0 => x
  | pos (suc n) => inc (x + pos n)
  | neg (suc n) => dec (x + neg n)
  \where {
    \func inc (x : Int) : Int
      | pos n => pos (suc n)
      | neg (suc n) => neg n

    \func dec (x : Int) : Int
      | pos 0 => neg (suc 0)
      | pos (suc n) => pos n
      | neg n => neg (suc n)
  }

\func \infixl 7 * (x y : Int) : Int
  | pos n, pos m => pos (n Nat.* m)
  | pos n, neg m => neg (n Nat.* m)
  | neg (suc n), pos m => neg (suc n Nat.* m)
  | neg (suc n), neg m => pos (suc n Nat.* m)

\func test+-1 : 0 + 0 = 0 => idp
\func test+-2 : 0 + 5 = 5 => idp
\func test+-3 : 5 + 0 = 5 => idp
\func test+-4 : 5 + -5 = 0 => idp
\func test+-5 : -5 + 4 = -1 => idp
\func test+-6 : -5 + -7 = -12 => idp
\func test+-7 : 5 + 7 = 12 => idp

\func test*-1 : 0 * 0 = 0 => idp
\func test*-2 : 0 * 5 = 0 => idp
\func test*-3 : 5 * 0 = 0 => idp
\func test*-4 : 5 * -5 = -25 => idp
\func test*-5 : -5 * 4 = -20 => idp
\func test*-6 : -5 * -7 = 35 => idp
\func test*-7 : 5 * 7 = 35 => idp

-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | bzero
  | x0 BinNat \with {
    | bzero => bzero
  }
  | x1 BinNat

\func test-BinNat : (x0 $ x0 $ x0 $ bzero) = bzero => idp

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred
  => \lam n => inP (suc n, idp)

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty =>
  \case p 0 \with { | inP (_, ()) }

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f)
  => \lam c => \case q c \with {
    | inP (b, pb) => \case p b \with {
      | inP (a, pa) => inP (a, pmap g pa *> pb)
    }
  }

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g
  => \lam c => \case p c \with {
    | inP (a, pa) => inP (f a, pa)
  }

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\func Set (A : \Set) : \Set
  => Quotient (List A) sameElems
  \where {
    \func sameElems (x y : List A) : \Type
      => \Pi (a : A) -> a `In` x -> a `In` y
  }

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f)
  => (\lam a x => a = x, \lam x y p => transport (__ y) (inv p) idp)

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty
  => \let S : Subs A => \lam x => Not (f x x)
     \in \case p S \with {
      | inP (a, p) =>
        contrProp {S a}
            (\lam inS _ => inS $ rewrite p inS)
            (\lam n g => n $ rewriteI p g)
    }

-- Optional
-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
