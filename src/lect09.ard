\import Data.Bool
\import Data.Maybe
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import lect06
\import lect07 (Functor, fmap)

\class Monad \extends Functor
  | return {A : \Set} : A -> F A
  | \infixl 2 >>= {A B : \Set} : F A -> (A -> F B) -> F B
  | return-left {A B : \Set} (a : A) (k : A -> F B) : return a >>= k = k a
  | return-right {A : \Set} (m : F A) : m >>= return = m
  | >>=-assoc {A B C : \Set} (m : F A) (k : A -> F B) (l : B -> F C) : (m >>= k) >>= l = m >>= (\lam x => k x >>= l)
  | fmap f m => m >>= \lam a => return (f a)
  | fmap-id => return-right
  | fmap-comp f g m => pmap (m >>=) (ext \lam a => inv (return-left _ _)) *> inv (>>=-assoc _ _ _)

\instance MaybeMonad : Monad Maybe
  | return => just
  | >>= {A B : \Set} (m : Maybe A) (k : A -> Maybe B) : Maybe B \elim m {
    | nothing => nothing
    | just a => k a
  }
  | return-left _ _ => idp
  | return-right {A : \Set} (m : Maybe A) : m >>= just = m \elim m {
    | nothing => idp
    | just a => idp
  }
  | >>=-assoc {A B C : \Set} (m : Maybe A) (k : A -> Maybe B) (l : B -> Maybe C) : m >>= k >>= l = m >>= (\lam x => k x >>= l) \elim m {
    | nothing => idp
    | just a => idp
  }

-- 1. Лямбда исчисление.

-- Term V -- тип термов, свободные переменные которых лежат в V.
\data Term (V : \Set)
  | var V
  | app (Term V) (Term V)
  | lam (Term (Maybe V))
  | unit

-- \x y. x
-- lam "x" (lam "y" (var "x"))
\func example {V : \Set} : Term V
  => lam (lam (var (just nothing)))

\func termMap {A B : \Set} (f : A -> B) (t : Term A) : Term B \elim t
  | var v => var (f v)
  | app t1 t2 => app (termMap f t1) (termMap f t2)
  | lam t => lam (termMap (fmap f) t)
  | unit => unit

{-
-- это некорректное определение termMap just
\func lift {A : \Set} (t : Term A) : Term (Maybe A) \elim t
  | var v => var (just v)
  | unit => unit
  | app t1 t2 => app (termMap just t1) (termMap just t2)
  | lam t => lam (lift t)
-}

\func maybe {A B : \Type} (b : B) (j : A -> B) (m : Maybe A) : B \elim m
  | nothing => b
  | just a => j a

\func liftM {A B : \Set} (k : A -> Term B) (m : Maybe A) : Term (Maybe B)
  => maybe (var nothing) (\lam a => termMap just (k a)) m

\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Set} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
    | unit => unit
  }
  | return-left _ _ => idp
  | return-right {A : \Set} (t : Term A) : t >>= var = t \elim t {
    | var v => idp
    | app t1 t2 => pmap2 app (return-right _) (return-right _)
    | lam t => pmap lam $ pmap (t >>=) (unfold liftM $ ext \case \elim __ \with {
      | nothing => idp
      | just a => idp
    }) *> return-right t
    | unit => idp
  }
  | >>=-assoc {A B C : \Set} (t : Term A) (k : A -> Term B) (l : B -> Term C) : t >>= k >>= l = t >>= \lam a => k a >>= l \elim t {
    | var v => idp
    | app t1 t2 => pmap2 app (>>=-assoc t1 k l) (>>=-assoc t2 k l)
    | lam t => pmap lam $ >>=-assoc _ _ _ *> pmap (t >>=) (ext \lam a => unfold liftM \case \elim a \with {
      | nothing => idp
      | just a => termMap_>>=-left _ _ _ *> termMap_>>=-right _ _ _
    })
    | unit => idp
  }
  \where {
    \func termMap_>>=-left {A B C : \Set} (f : A -> B) (t : Term A) (k : B -> Term C) : termMap f t >>= k = t >>= \lam a => k (f a) \elim t
      | var v => idp
      | app t1 t2 => pmap2 app (termMap_>>=-left _ _ _) (termMap_>>=-left _ _ _)
      | lam t => pmap lam $ termMap_>>=-left _ _ _ *> pmap (t >>=) (ext \case \elim __ \with {
        | nothing => idp
        | just a => idp
      })
      | unit => idp

    \func termMap_termMap {A B C : \Set} (t : Term A) (f : A -> B) (g : B -> C) : termMap g (termMap f t) = termMap (\lam a => g (f a)) t \elim t
      | var v => idp
      | app t1 t2 => pmap2 app (termMap_termMap _ _ _) (termMap_termMap _ _ _)
      | lam t => pmap lam $ termMap_termMap _ _ _ *> pmap (termMap __ t) (ext \case \elim __ \with {
        | nothing => idp
        | just a => idp
      })
      | unit => idp

    \func termMap_>>=-right {A B C : \Set} (t : Term A) (k : A -> Term B) (f : B -> C) : t >>= (\lam a => termMap f (k a)) = termMap f (t >>= k) \elim t
      | var v => idp
      | app t1 t2 => pmap2 app (termMap_>>=-right _ _ _) (termMap_>>=-right _ _ _)
      | lam t => pmap lam $ pmap (t >>=) (ext \case \elim __ \with {
        | nothing => idp
        | just a => unfold liftM $ termMap_termMap _ _ _ *> inv (termMap_termMap _ _ _)
      }) *> termMap_>>=-right _ _ _
      | unit => idp
  }

-- Отношение одношаговой редукции
\data Red1 {V : \Set} (t s : Term V) \elim t, s
  | app t a, s => beta {f : Term (Maybe V)} (t = lam f) (s = f >>= maybe a var)
  | app t1 t2, app s1 s2 => {
    | red-left (Red1 t1 s1) (t2 = s2)
    | red-right (t1 = s1) (Red1 t2 s2)
  }
  | lam t, lam s => red-lam (Red1 t s)

-- app (lam f) a ~> f[a]
-- f : Term (Maybe A)
-- a : Term A
-- f[a] : Term A

-- t < s iff Red1 t s

-- Если red -- некоторое отношение на A, то элемент a : A называется достижимым, если не существует бесконечных цепочек редукций, начинающихся в a.
-- Это определение хорошо работает только классически, интуиционистски мы определяем предикат достижимости индуктивно.
-- В индуктивном построении будет всего одно правило: a -- достижим, если достижимы все a', к котором a редуцируется.
\data Acc {A : \Type} (red : A -> A -> \Type) (a : A)
  | acc (\Pi {a' : A} -> red a a' -> Acc red a')

\data Tree
  | leaf
  | branch (Bool -> Tree)

-- Так как функция вычисления термов должна быть тотально, то мы определим ее только для достижимых термов.
-- Она будет дополнительно принимать стратегию редукции, то есть функцию, которая для каждого терма возвращает либо терм, к которому он редуцируется, либо доказательство, что таких термов нет.
-- Возвращает функция eval терм вместе с доказательством, что он находится в нормальной форме.
\func eval {V : \Set} (t : Term V) (a : Acc Red1 t)
           (str : \Pi (s : Term V) -> Decide (\Sigma (q : Term V) (Red1 s q)))
  : \Sigma (s : Term V) (\Pi (q : Term V) -> Not (Red1 s q)) \elim a
  | acc f => \case str t \with {
    | yes (q,t~>q) => eval q (f t~>q) str
    | no r => (t, \lam q x => r (q,x))
  }

-- Если t достижим, то и lam t достижим.
\func lamAcc {V : \Set} (t : Term (Maybe V)) (tAcc : Acc Red1 t) : Acc Red1 (lam t) \elim tAcc
  | acc f => acc \lam {t'} r => \case \elim t', \elim r \with {
    | lam t', red-lam r => lamAcc t' (f r)
  }

-- 2. Нейтральные термы.

-- Терм называется нейтральным, если он достижим и в голове не содержит лямбду.
-- Точнее предикат нейтральности определяется индуктивно:
\data Neutral {V : \Set} (t : Term V) \elim t
  | var v => var-neutral
  | unit => unit-neutral
  | app t1 t2 => app-neutral (Neutral t1) (Acc Red1 t2)

-- Нейтральные термы замкнуты относительно редукций.
\func neutralRed {V : \Set} {t s : Term V} (r : Red1 t s) (n : Neutral t) : Neutral s
  => {?}

-- Нейтральные термы действительно достижимы.
\func neutralAcc {V : \Set} {t : Term V} (n : Neutral t) : Acc Red1 t \elim t, n
  | var v, var-neutral => acc \case __
  | unit, unit-neutral => acc \case __
  | app t t1, app-neutral n a => neutralAppAcc n (neutralAcc n) a
  \where {
    -- Для доказательства утверждения neutralAcc нам понадобится вспомогательное утверждение, которое говорит, что app t s достижим, если t и s достижимы и t нейтрален.
    \func neutralAppAcc {V : \Set} {t s : Term V} (n : Neutral t) (a1 : Acc Red1 t) (a2 : Acc Red1 s) : Acc Red1 (app t s) \elim a1, a2
      | acc f, acc g => acc \lam {t'} r => \case \elim t', \elim r \with {
        | t', beta p p1 => \case rewriteF p n
        | app t' t'1, red-left r p => rewriteI p $ neutralAppAcc (neutralRed r n) (f r) (acc g)
        | app t' s', red-right p r => rewriteI p $ neutralAppAcc n (acc f) (g r)
      }
  }

-- 3. Типизация.

-- Теперь определим отношение типизации на термах.
-- Для этого сначала определим тип типов просто типизированного лямбда исчисления.
\data Type
  | Unit
  | Arr Type Type

-- Отношение типизации определяется индуктивно обычным способом.
\data hasType {V : \Set} (ctx : V -> Type) (t : Term V) (T : Type) \elim t, T
  | unit, Unit => unit-type
  | var v, T => var-type (ctx v = T)
  | app t1 t2, B => app-type {A : Type} (hasType ctx t1 (Arr A B)) (hasType ctx t2 A)
  | lam t, Arr A B => lam-type (hasType (maybe A ctx) t B)

-- 4. Типизируемые термы достижимы.

-- Чтобы доказать, что типизируемые термы достижимы, определим вспомогательный предикат "интерпретация T" для каждого типа T, удовлетворяющий следующим условиям:
-- * Если t имеет тип T, то t лежит в интерпретации T. Это утверждение останется в качетсве упражнения (typeableInterpId).
-- * Если t лежит в интерпретации T, то t достижим. Это доказывается индукцией по типу (interpAcc).

\func Interp {V : \Set} (T : Type) (t : Term V) : \Type \elim T
  | Unit => Acc Red1 t
  | Arr T1 T2 => \Pi {t1 : Term V} -> Interp T1 t1 -> Interp T2 (app t t1)

-- Одновременно с interpAcc мы докажем, что любой нейтральный терм лежим в интерпретации T.
\func neutralInterp {V : \Set} (T : Type) {t : Term V} (n : Neutral t) : Interp T t \elim T
  | Unit => neutralAcc n
  | Arr T1 T2 => \lam i => neutralInterp T2 (app-neutral n (interpAcc T1 _ i))

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t
  => {?} -- это упражнение

\func interpAcc {V : \Set} (T : Type) (t : Term V) (i : Interp T t) : Acc Red1 t \elim T
  | Unit => i
  | Arr T1 T2 => appAccLeft (interpAcc T2 _ (i {unit} (neutralInterp T1 unit-neutral)))

\func typeableInterpId {V : \Set} (ctx : V -> Type) (t : Term V) (T : Type) (p : hasType ctx t T) : Interp T t
  => rewriteF TermMonad.return-right $ typeableInterp ctx var (\lam u => neutralInterp _ var-neutral) p

-- Это более общее утверждение необходимо для усиления индукционной гипотезы.
\func typeableInterp {U V : \Set} (ctx : U -> Type) (env : U -> Term V)
                     (C : \Pi (u : U) -> Interp (ctx u) (env u)) {t : Term U} {T : Type}
                     (p : hasType ctx t T)
  : Interp T (t >>= env)
  => {?} -- это упражнение

\func typeableAcc {V : \Set} (ctx : V -> Type) (t : Term V) (T : Type)
                  (h : hasType ctx t T) : Acc Red1 t
  => interpAcc T t (typeableInterpId ctx t T h)