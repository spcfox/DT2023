\import Data.Maybe
\import Function.Meta
\import Meta
\import Paths
\import Paths.Meta
\import lect06 (Decide, yes, no)
\import lect09

-- 1. Определите отношение многошаговой редукции на Term.

\data Red {V : \Set} (t s : Term V)
  | red-0 (t = s)
  | red-step (u : Term V) (Red1 t u) (Red u s)

-- 2. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | var v => no (\lam (_, r) => \case r)
  | app t1 t2 => \case strategy t1 \with {
    | yes (s, r) => yes (app s t2, red-left r idp)
    | no contra1 => \case strategy t2 \with {
      | yes (s, r) => yes (app t1 s, red-right idp r)
      | no contra2 => cases (t1 arg addPath) \with {
        | lam t1, _ => yes (t1 >>= maybe t2 var, beta idp idp)
        | var _, p => no \lam (u, r) => cases (u, r) \with {
          | _, beta () _
          | app s _, red-left r _ => contra1 (s, rewrite p r)
          | app _ s, red-right _ r => contra2 (s, r)
        }
        | app t11 t22, p => no \lam (u, r) => cases (u, r) \with {
          | _, beta () _
          | app s _, red-left r _ => contra1 (s, rewrite p r)
          | app _ s, red-right _ r => contra2 (s, r)
        }
        | unit, p => no \lam (u, r) => cases (u, r) \with {
          | _, beta () _
          | app s _, red-left r _ => contra1 (s, rewrite p r)
          | app _ s, red-right _ r => contra2 (s, r)
        }
      }
    }
  }
  | lam t => \case strategy t \with {
    | yes (s, r) => yes (lam s, red-lam r)
    | no contra => no \lam (s, r) => cases (s, r) \with {
      | lam s, red-lam r => contra (s, r)
    }
  }
  | unit => no (\lam (_, r) => \case r)

-- 3. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc f => acc \lam r => appAccLeft (f (red-left r idp))

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s
  | acc f => acc \lam r => appAccRight (f (red-right idp r))

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc f => acc \lam r => subLamAcc (f (red-lam r))

-- 4. Докажите, что нейтральные термы замкнуты относительно редукций.

\func neutralRed {V : \Set} {t s : Term V} (r : Red1 t s) (n : Neutral t) : Neutral s \elim t, s, r, n
  | app t1 t2, s, beta idp p, app-neutral n a => \case n
  | app t1 t2, app s1 s2, red-left r idp, app-neutral n a => app-neutral (neutralRed r n) a
  | app t1 t2, app s1 s2, red-right idp r, app-neutral n (acc f) => app-neutral n (f r)

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func termMap-fmap {A B : \Set} (f : A -> B) (t : Term A) : termMap f t = TermMonad.fmap f t \elim t
  | var v => idp
  | app t1 t2 => pmap2 app (termMap-fmap f t1) (termMap-fmap f t2)
  | lam t => pmap lam $ (termMap-fmap (Monad.fmap f) t *> pmap (t >>=) (ext \lam m => \case \elim m \with {
    | nothing => idp
    | just a => idp
  }))
  | unit => idp

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B \elim b
  | var v => \case h \with {
    | var-type p => rewriteI p $ h' v
  }
  | app b1 b2 => \case h \with {
    | app-type {A} h1 h2 => app-type (substLem ctx b1 (Arr A B) h1 ctx' a h') (substLem ctx b2 A h2 ctx' a h')
  }
  | lam b => \case \elim B, h \with {
    | Arr B1 B2, lam-type h =>
      lam-type (substLem (maybe B1 ctx) b B2 h (maybe B1 ctx') (liftM a) (\lam u => \case \elim u \with {
        | nothing => var-type idp
        | just u => {?}
      }))
  }
  | unit => \case \elim B, h \with {
    | Unit, unit-type => unit-type
  }

\func substLem1 {V : \Set} (ctx : V -> Type) (a : Term V) (b : Term (Maybe V)) (A B : Type)
                (a-type : hasType ctx a A) (b-type : hasType (maybe A ctx) b B)
  : hasType ctx (b >>= maybe a var) B
  => substLem (maybe A ctx) b B b-type ctx (maybe a var)
      (\lam u => \case \elim u \with {
        | nothing => a-type
        | just v => var-type idp
      })

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func red1Lem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red1 a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim a, a', r, A, h
  | app a b, a', beta {f} idp p, A, app-type {B} (lam-type hf) hb => rewrite p (substLem1 ctx b f B A hb hf)
  | app a b, app a' _, red-left r idp, A, app-type ha hb => app-type (red1Lem r ha) hb
  | app a b, app _ b', red-right idp r, A, app-type ha hb => app-type ha (red1Lem r hb)
  | lam a, lam a', red-lam r, Arr A B, lam-type h => lam-type (red1Lem r h)

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim r
  | red-0 idp => h
  | red-step t r1 r => redLem r (red1Lem r1 h)

-- Optional
-- 7. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\data HeadRed {V : \Set} (a t s : Term V) \elim t, s
  | app t1 t2, app s1 s2 => headApp (HeadRed a t1 s1) (t2 = s2)
  | app t a', s => headBeta {f : Term (Maybe V)} (a = a') (lam f = t) (f >>= maybe a var = s)

-- 8. Докажите typeableInterp из лекции
